# Importing necessary modules
import PySimpleGUI as sg       # GUI library for building simple Python interfaces
from nfa import NFA            # Importing the NFA class that handles NFA logic
import os                     # For opening the image file generated by Graphviz

# Define the main GUI class
class NFAGUI:
    def __init__(self):
        # Initialize attributes for storing NFA components
        self.states = []                  # List of state names like ['q0', 'q1']
        self.alphabet = []                # List of input symbols like ['a', 'b']
        self.transition_table_data = []   # For GUI table display (2D list of strings)
        self.transition_table = {}        # Real backend transition mapping for NFA (dict)
        self.initial_states = set()       # Set of initial state(s)
        self.final_states = set()         # Set of final state(s)

    # Entry point to launch the GUI
    def run(self):
        sg.theme("DarkBlue3")  # Set a GUI theme

        # First screen layout: ask for number of states and alphabet
        layout = [
            [sg.Text("Enter number of states:"), sg.Input(key="-NUM_STATES-", size=(5, 1)),
             sg.Text("Enter alphabet (comma-separated):"), sg.Input(key="-ALPHABET-", size=(15, 1))],
            [sg.Button("Set States and Alphabet"), sg.Button("Exit")]
        ]
        window = sg.Window("NFA Simulator Setup", layout)

        while True:
            event, values = window.read()
            if event in (sg.WINDOW_CLOSED, "Exit"):
                break
            elif event == "Set States and Alphabet":
                try:
                    # Configure states and alphabet, then proceed
                    self.set_states_and_alphabet(window, values["-NUM_STATES-"], values["-ALPHABET-"])
                    window.close()
                    self.build_main_window()
                except Exception as e:
                    sg.popup_error(f"Error setting states or alphabet: {e}")
        window.close()

    # Set states and alphabet based on user input
    def set_states_and_alphabet(self, window, num_states_str, alphabet_str):
        num_states = int(num_states_str)  # Convert number of states from string to int
        self.states = [f"q{i}" for i in range(num_states)]  # State names: q0, q1, etc.
        self.alphabet = [sym.strip() for sym in alphabet_str.split(",") if sym.strip()]  # Clean up alphabet
        # Initialize empty table for GUI
        self.transition_table_data = [["" for _ in self.alphabet] for _ in self.states]
        # Initialize backend transition dict: e.g., {'q0': {'a': set(), 'b': set()}, ...}
        self.transition_table = {state: {symbol: set() for symbol in self.alphabet} for state in self.states}

    # Create main window after states/alphabet are configured
    def build_main_window(self):
        # Table widget to show transition table
        table = sg.Table(
            values=self.transition_table_data,
            headings=self.alphabet,
            key="-TABLE-",
            enable_events=True,
            justification="center",
            num_rows=min(10, len(self.states)),  # Show up to 10 rows
            auto_size_columns=True,
            expand_x=True,
            expand_y=True,
        )

        # Column of checkboxes for selecting initial and final states
        checkbox_col = [[
            sg.Checkbox(f"{state} (Initial)", key=f"-INIT-{state}"),
            sg.Checkbox(f"{state} (Final)", key=f"-FINAL-{state}")
        ] for state in self.states]

        # Main layout with transition table, checkboxes, string input, and buttons
        layout = [
            [sg.Text("Transition Table:"), table],
            [sg.Column(checkbox_col, key="-CHECKBOX_COL-")],
            [sg.Text("Enter input string:"), sg.Input(key="-INPUT-", size=(20, 1))],
            [sg.Button("Generate NFA"), sg.Button("Simulate"), sg.Button("Exit")]
        ]

        window = sg.Window("NFA Simulator", layout, finalize=True)

        while True:
            event, values = window.read()
            if event in (sg.WINDOW_CLOSED, "Exit"):
                break

            # Handle transition table cell click
            elif event == "-TABLE-":
                selected_rows = values["-TABLE-"]
                if selected_rows:
                    row = selected_rows[0]  # Which row (state) was selected

                    # Ask user which column/symbol they want to edit
                    col_layout = [[sg.Text(f"Choose symbol column for {self.states[row]}:")]]
                    for idx, sym in enumerate(self.alphabet):
                        col_layout.append([sg.Button(f"{idx}: {sym}", key=f"-SYMBOL-{idx}-")])
                    col_win = sg.Window("Choose Symbol", col_layout)
                    col_event, _ = col_win.read()
                    col_win.close()

                    # If a symbol button was clicked
                    if col_event and col_event.startswith("-SYMBOL-"):
                        col = int(col_event.split("-")[2])  # Extract column index
                        symbol = self.alphabet[col]
                        state = self.states[row]
                        # Prompt for next states (e.g., q1,q2)
                        result = sg.popup_get_text(f"Enter next states for {state} on symbol '{symbol}' (comma-separated):")
                        if result is not None:
                            next_states = {s.strip() for s in result.split(",") if s.strip()}
                            # Update both GUI table and backend transition dict
                            self.transition_table_data[row][col] = ", ".join(next_states)
                            self.transition_table[state][symbol] = next_states
                            window["-TABLE-"].update(values=self.transition_table_data)

            # Handle "Generate NFA" click
            elif event == "Generate NFA":
                # Gather selected initial and final states
                self.initial_states = {state for state in self.states if values.get(f"-INIT-{state}")}
                self.final_states = {state for state in self.states if values.get(f"-FINAL-{state}")}
                try:
                    # Create NFA object and visualize it
                    nfa = NFA(
                        states=self.states,
                        alphabet=self.alphabet,
                        transition_function=self.transition_table,
                        initial_states=self.initial_states,
                        final_states=self.final_states
                    )
                    # Generate image using Graphviz
                    nfa.visualize("nfa_graph")
                    # Open the generated image file (macOS or Windows)
                    os.system("open nfa_graph.png" if os.name == "posix" else "start nfa_graph.png")
                except Exception as e:
                    sg.popup_error(f"Error generating NFA: {e}")

            # Handle simulation of input string
            elif event == "Simulate":
                input_str = values["-INPUT-"]
                try:
                    # Create NFA and check if it accepts the input string
                    nfa = NFA(
                        states=self.states,
                        alphabet=self.alphabet,
                        transition_function=self.transition_table,
                        initial_states={s for s in self.states if values.get(f"-INIT-{s}")},
                        final_states={s for s in self.states if values.get(f"-FINAL-{s}")}
                    )
                    accepted = nfa.accepts(input_str)
                    sg.popup("Result", f"String {'ACCEPTED' if accepted else 'REJECTED'} by the NFA.")
                except Exception as e:
                    sg.popup_error(f"Error during simulation: {e}")

        window.close()
